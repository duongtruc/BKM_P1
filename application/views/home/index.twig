{% extends "_templates/base.twig" %}
{% block javascript %}
{% endblock %}
{% block content %}
    <div class="main-content clearfix">
        <div class="container">
            <div class="span6">
                <input id="screen" readonly type="text"><br><br>
                <button class="btn-small"><strong>(</strong></button>
                <button class="btn-small"><strong>)</strong></button>
                <button class="btn-small"><strong>^</strong></button>
                <button class="btn-small"><strong>sin</strong></button>
                <button class="btn-small"><strong>cos</strong></button>
                <button class="btn-small"><strong>tan</strong></button>
                <button class="btn-small"><strong>log</strong></button><br>
                <button class="btn-number"><strong>6</strong></button>
                <button class="btn-number"><strong>7</strong></button>
                <button class="btn-number"><strong>8</strong></button>
                <button class="btn-number"><strong>9</strong></button>
                <button class="btn-del btn-func"><strong>DEL</strong></button>
                <button class="btn-clr btn-func"><strong>AC</strong></button><br>
                <button class="btn-number"><strong>2</strong></button>
                <button class="btn-number"><strong>3</strong></button>
                <button class="btn-number"><strong>4</strong></button>
                <button class="btn-number"><strong>5</strong></button>
                <button class="btn-number btn-func"><strong>+</strong></button>
                <button class="btn-number btn-func"><strong>-</strong></button><br>
                <button class="btn-number"><strong>0</strong></button>
                <button class="btn-number"><strong>1</strong></button>
                <button class="btn-number"><strong>.</strong></button>
                <button class="btn-number"><strong>e</strong></button>
                <button class="btn-number btn-func"><strong>x</strong></button>
                <button class="btn-number btn-func"><strong>/</strong></button><br>
                <button class="btn-number" id="btn-ans"><strong>Ans</strong></button>
                <button class="btn-result"><strong>=</strong></button>
            </div>
        </div>
    </div>
    <script type="application/javascript">
        var ans = 0;//The current result;
        /*
        Main function
        @author:
        @param :
            expression: string
        @return : real || "error"
         */

        var base=0, plus=0, multi= 1, pow= 2, baseInc= 3;
        /* For now, baseInc(base increment) = 3 because there're 3 priority level.
        Plus and  subtraction(plus with negative)  are level 0 (lowest)
        Multiplication and division (multi with inverse) are level 1
        Power is level 2.
        CONSIDER THE PRIORITY AND THE OF THE REST
         */

        function power(base,exponent){
            var res=1;
            for(i=0;i<exponent;i++) res*=base;
            return res;
        }

        function isOperator(operator){
            if (operator=='+'||operator=='-'||operator=='x'||operator=='/'||operator=='^') return true;
            else return false;
        }

        function getResult(operands, operators){
            while (operators.length!=0){
                var pos= 0, max=Math.max.apply(null,operators);
                for (i=0;operators[i]!=max;i++) pos++;
                switch (operators[pos]%baseInc){
                    case plus:
                        operands[pos+1]+=operands[pos];
                        break;
                    case multi:
                        operands[pos+1]*=operands[pos];
                        break;
                    case pow:
                        operands[pos+1]=power(operands[pos],operands[pos+1]);
                        break;
                }
                operands.splice(pos,1);
                operators.splice(pos,1);
            }
            return operands[0];
        }
        
        function calculate(expression) {
            //TODO - analysis the expression for result; return "error" if has error
//<<<<<<< HEAD
           // if (expression[2] == 3) alert("bang");
            //else alert("ko bang");
            var thu = add2Stack(expression);
           // while(thu.length>0) document.write((k = thu.shift()) + " " + " k= " + k + " xx ");
            kq=result_calculater(thu);
            return kq;
        }
        function add2Stack(expression)
        {
            var oprd = new Array();
            var oprt = new Array();
             num = 0;

            for (i = 0; i < expression.length; i++)
            {
                if (expression[i]>= '0' && expression[i] <= '9' || expression[i] == '.')
                {
                   // if (dot==false)
                     num = num + expression[i];//alert(num)

                }
                else //neu la toan tu
                {
                    switch (expression[i]) {
                        case '+':case '-':case 'x':case '/':case '^':case 'e':
                        oprd.push(num);
                        num=0;
                            if (oprt.length > 0)
                            {
                                var op = oprt.pop();
                                if (priority(op) > priority(expression[i].toString()))
                                {
                                    oprd.push(op);
                                }
                                else oprt.push(op);

                            }
                            oprt.push(expression[i]);
                            break;
                        case '(':
                            oprt.push("(");
                            break;
                        case ')':
                            oprd.push(num);
                            num=0;
                            while (oprt.length > 0)
                            {
                                var op = oprt.pop();
                                if (op == "(") break;
                                oprd.push(op);
                            }
                        case 'c':
                            if (expression[i+1] == 'o' && expression[i+2] == 's')
                            {
                                var chuoi = expression[i];
                                chuoi += expression[i+1];
                                chuoi += expression[i+2];
                                oprt.push(chuoi);   //alert(oprt.pop() + " day la sin");
                                i += 2;//alert("i = " + i);
                            }
                            break;
                        case 's':
                            if (expression[i+1] == 'i' && expression[i+2] == 'n')
                            {
                                var chuoi = expression[i];
                                chuoi += expression[i+1];
                                chuoi += expression[i+2];
                                oprt.push(chuoi);   //alert(oprt.pop() + " day la sin");
                                i += 2;//alert("i = " + i);
                            }
                            break;
                        case 'l':
                            if (expression[i+1] == 'o' && expression[i+2] == 'g')
                            {
                                var chuoi = expression[i];
                                chuoi += expression[i+1];
                                chuoi += expression[i+2];
                                oprt.push(chuoi);   //alert(oprt.pop() + " day la sin");
                                i += 2;//alert("i = " + i);
                            }
                            break;
                        case 't':
                            if (expression[i+1] == 'a' && expression[i+2] == 'n')
                            {
                                var chuoi = expression[i];
                                chuoi += expression[i+1];
                                chuoi += expression[i+2];
                                oprt.push(chuoi);   //alert(oprt.pop() + " day la sin");
                                i += 2;//alert("i = " + i);
                            }
                            break;
                    }
                }
                if (i == (expression.length - 1)) oprd.push(num);
            }
            while (oprt.length > 0) oprd.push(oprt.pop());
            return oprd;
        }
        function priority(op) //op1 > op2??
        {
            switch (op){
                case "+": return 10;
                case "(" : return 10;
                case "-": return 11;
                case "x": return 12;
                case "/": return 13;
                case "^": case "e": return 15;
                case "sin":case "cos":case "tan":case "log": return 19;
            }
        }

        function result_calculater(expression)
        {
            var cal = new Array();
            while (expression.length > 0)
            {
                var temp=expression.shift();
                switch (temp){ //toan tu
                    case "+":
                        a=parseFloat(cal.pop());
                        b=parseFloat(cal.pop());
                        rt=parseFloat(a+b);
                        cal.push(rt);
                        break;
                    case "-":
                        b=parseFloat(cal.pop());
                        a=parseFloat(cal.pop());
                        rt=parseFloat(a-b);
                        cal.push(rt);
                        break;
                    case "x":
                        b=parseFloat(cal.pop());
                        a=parseFloat(cal.pop());
                        rt=parseFloat(a*b);
                        cal.push(rt);
                        break;
                    case "/":
                        b=parseFloat(cal.pop());//thang vao truoc / thang vao sau
                        a=parseFloat(cal.pop());
                        rt=parseFloat(a/b);
                        cal.push(rt);
                        break;
                    case "^":
                        b=parseFloat(cal.pop());
                        a=parseFloat(cal.pop());
                        rt=parseFloat(Math.pow(a,b));
                        cal.push(rt);
                        break;
                    case "e":
                        a=parseFloat(cal.pop());
                        b=parseFloat(cal.pop());
                        rt=parseFloat(a*Math.pow(10,b));
                        cal.push(rt);
                        break;
                    case "sin":
                        a=parseFloat(cal.pop());
                        rt=parseFloat(Math.sin(a));
                        cal.push(rt);
                        break;
                    case "cos":
                        a=parseFloat(cal.pop());
                        rt=parseFloat(Math.cos(a));
                        cal.push(rt);
                        break;
                    case "tan":
                        a=parseFloat(cal.pop());
                        rt=parseFloat(Math.tan(a));
                        cal.push(rt);
                        break;
                    case "log":
                        a=parseFloat(cal.pop());
                        rt=parseFloat(Math.log(a));
                        cal.push(rt);
                        break;
                    default:
                        cal.push(temp);
                        break;
                }
            }
            return cal;
        }
        /*
=======
            var notInverse=true, number= 1, negativeFst;
            var operand=[], operator=[];
			
            // Check if expression end or start with a operator but not minus.
            if (isOperator(expression[expression.length-1])||isOperator(expression[0])&&expression[0]!='-')
                return "ERROR.";

            if (expression[0]!='-') negativeFst=false; else negativeFst=true;

            //Separate operands, operators and push in array.
            for (i=0;i<expression.length;i++){

                //Check if 1 operator next to other one? HAVEN'T SOLVED OPERATING WITH NEGATIVE.
                if (i+1<expression.length&&isOperator(expression[i])&&isOperator(expression[i+1]))
                    return"ERROR.";

                //Check if right parenthesis more than left parenthesis
                if (base<0)
                    return"ERROR.";

                switch (expression[i]){
                    case '(': base+=baseInc; break;
                    case ')': base-=baseInc;break;
                    case '+': {
                        notInverse=true;
                        operand[operand.length]=number;
                        number=1;
                        operator[operator.length]=base+plus; break;
                    }
                    case 'x': {
                        notInverse=true;
                        operand[operand.length]=number;
                        number=1;
                        operator[operator.length]=base+multi; break;
                    }
                    case '^': {
                        notInverse=true;
                        operand[operand.length]=number;
                        number=1;
                        operator[operator.length]=base+pow; break;
                    }
                    case '-': {
                        notInverse=true;
                        if (operand.length!=0||!negativeFst){
                            operand[operand.length]=number;
                            operator[operator.length]=base+plus;
                        }
                        number=-1; break;
                    }
                    case '/': {
                        notInverse=false;
                        operand[operand.length]=number;
                        number=1;
                        operator[operator.length]=base+multi; break;
                    }
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    {
                        if(notInverse){
                            if(i==0||expression[i-1]=='+'||expression[i-1]=='-'||expression[i-1]=='x'||expression[i-1]=='^'||expression[i-1]=='(')
                                number*=(expression[i]-'0');
                            else if(expression[i-1]-'0'<10&&expression[i-1]-'0'>-1) {
                                number=number*10+(expression[i]-'0');
                            }
                        }
                        else{
                            if (expression[i-1]=='/') number/=(expression[i]-'0');
                            else number=1/(1/number*10+(expression[i]-'0'));
                        }
                        break;
                    }
                }
            }

            operand[operand.length]=number;
            if (operator.length==0) {
                if (operand.length==0) return "";
                else return operand[0];
            }
            else return getResult(operand,operator);
>>>>>>> 6cc61077170b9c562197b612cd79b9fa25a24fc3

        }*/

        $(document).ready(function() {
            //For number and operator button
            $(".btn-number, .btn-small").on('click', function() {
                if ($(this).prop("id") != "btn-ans") {
                    $("#screen").val($("#screen").val() + $(this).text());
                }
            });
            //For del button
            $(".btn-del").on("click", function() {
                var s = $("#screen").val();
                $("#screen").val(s.substring(0, s.length - 1));
            });
            //For ans button
            $("#btn-ans").on('click', function() {
                $("#screen").val($("#screen").val() + ans.toString());
            });
            //For AC button
            $(".btn-clr").on("click", function() {
                $("#screen").val("");
            });
            //For getting result
            $(".btn-result").on('click', function() {
                var expression = $("#screen").val();
                var result = calculate(expression);
                if (result != 'error')
                    ans = result;
                $("#screen").val(result);
            });
        });
    </script>
{% endblock %}
